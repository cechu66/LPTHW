################################################
# given list of url
# 1.resolve ip address     
# 2.check http code/timeout
# 3.check ip header
#    . redirect, not found, timeout, web server
################################################


import sys, socket, requests, urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

RED = '\033[0;31;47m'
BLUE = '\033[0;34;47m'
NORMAL = '\033[1;37;40m'


def get_Host_Name_IP(x):
    global host_ip

    try:
        host_ip = socket.gethostbyname(x)
        return host_ip
    except socket.error:
        print(x, ":url is invalid. Could not resolve")

def get_http_header(url):
    global response

    try:
        s = requests.Session()
        response = s.get("http://"+url,timeout=10, allow_redirects=False)
        response_header = s.head("http://"+url)
        return response.status_code, response_header.headers
        response.history
        for resp in response.history:
            resp.raise_for_status()
            return resp.status_code
    except requests.exceptions.HTTPError as errh:
        return errh
    except requests.exceptions.Timeout as errt:
        return errt
    except requests.exceptions.ConnectionError as errc:
        return errc
    except requests.exceptions.RequestException as err:
        return err
#    except:
#        return 0
    
def main():
    #global content
    with open("listurl.txt", "r") as inFile:
        #for line in inFile:
        url = inFile.readlines()
        content = [x.strip() for x in url]
        for x in content:
            ip = get_Host_Name_IP(x)
            #status = get_http_header(x)
            he     = get_http_header(x)
            print("Server: " + he)
            #if (status == 200):
            #    print(x, ": ", ip, status, "site OK")
            #elif (status == 301):
            #    print(x, ": ", ip, status, "site redirected")
            #elif (status == 404):
            #    print(x, ": ", ip, status, "page not found")
            #else:
            #    print("aa")

if __name__ == '__main__':
    main()
